package jcolonia.daw2024.e3b;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Properties;
import java.util.Set;

/**
 * Utilidades de acceso a una base de datos SQLite para gesti√≥n de
 * {@link InventarioAula puestos de un aula de inform√°tica}.
 * 
 * @version 09.08 (20250525000)
 * @author <a href="dmartin.jcolonia@gmail.com">David H. Mart√≠n</a>
 */
public class AccesoBD implements AutoCloseable {
	/** Sentencia SQL para crear la tabla ¬´Puestos¬ª ‚Äìvac√≠a‚Äì si no existe. */
	private static final String SQL_CREAR_TABLA = "CREATE TABLE IF NOT EXISTS Puestos (c√≥digo_puesto TEXT NOT NULL, ordenador TEXT NOT NULL, nombre TEXT NOT NULL, apellidos TEXT NOT NULL)";

	/** Prototipo de sentenciaSQL preparada para insertar puestos. */
	private static final String SQL_INSERTAR_CONTACTO = "INSERT INTO Puestos VALUES (?, ?, ?, ?)";

	/** Sentencia SQL para obtener un volcado completo de los resultados. */
	private static final String SQL_LISTADO_AULA = "SELECT * FROM Puestos WHERE c√≥digoPuesto LIKE ?";

	/** Sentencia SQL para vaciar los resultados. */
	private static final String SQL_VACIAR_TABLA = "DELETE FROM Puestos";

	/** Sentencia SQL para compactar espacio en el archivo de la base de datos. */
	private static final String SQL_COMPACTAR_ESPACIO = "VACUUM";

	/**
	 * Nombre predeterminado del archivo de configuraci√≥n del acceso a la base de
	 * datos.
	 */
	public static final String ARCHIVO_CONFIG_PREDETERMINADO = "config.xml";

	/** Nombre predeterminado del archivo de la base de datos. */
	public static final String ARCHIVO_BD_PREDETERMINADO = "inventarioPuestosIC.db";
 
	/** Nombre del archivo de datos para impotaci√≥n/exportaci√≥n. */
	private static final String NOMBRE_ARCHIVO = "Inventario ICXX.txt";

	/** Configuraci√≥n del acceso a la base de datos. */
	private Properties configuraci√≥n;

	/** Conexi√≥n a la base de datos. */
	private Connection conexi√≥n;

	/** Sentencia general SQL. */
	private Statement sentenciaGeneralSQL;

	/**
	 * Sentencia preparada SQL, para inserciones en la base de datos. *
	 * 
	 * @see #SQL_INSERTAR_CONTACTO
	 */
	private PreparedStatement preInserci√≥nSQL;
	/**
	 * Sentencia preparada SQL, para consultas a la base de datos. *
	 * 
	 * @see #SQL_LISTADO_AULA
	 */
	private PreparedStatement preConsultaSQL;

	/**
	 * Carga la configuraci√≥n desde el archivo de configuraci√≥n predeterminado.
	 * 
	 * @see #ARCHIVO_CONFIG_PREDETERMINADO
	 */
	public AccesoBD() {
		this(ARCHIVO_CONFIG_PREDETERMINADO, ARCHIVO_BD_PREDETERMINADO);
	}

	/**
	 * Carga la configuraci√≥n desde un archivo de configuraci√≥n. En caso de error
	 * genera uno nuevo.
	 * 
	 * @param archivoConfiguraci√≥n la ruta y nombre del archivo
	 * @param archivoBD            la ruta y nombre del archivo de base de datos a
	 *                             emplear en caso de tener que crear una nueva
	 *                             configuraci√≥n. En caso de ser nulo o vac√≠o se
	 *                             emplear√° el {@link #ARCHIVO_BD_PREDETERMINADO
	 *                             nombre predeterminado}.
	 */
	public AccesoBD(String archivoConfiguraci√≥n, String archivoBD) {
		try {
			configuraci√≥n = cargarConfiguraci√≥n(archivoConfiguraci√≥n);
		} catch (AccesoBDException e) {
			if (archivoBD == null || archivoBD.isEmpty()) {
				archivoBD = ARCHIVO_BD_PREDETERMINADO;
			}
			System.err.printf("Error cargando configuraci√≥n de ¬´%s¬ª: %s%n", archivoConfiguraci√≥n, e.getMessage());
			configuraci√≥n = crearConfiguraci√≥n(archivoConfiguraci√≥n, archivoBD);
		}
	}

	/**
	 * Lee un archivo de configuraci√≥n.
	 * 
	 * @param archivoConfiguraci√≥n la ruta del archivo
	 * @return la configuraci√≥n le√≠da
	 * @throws AccesoBDException si no existe el archivo o se produce alguna
	 *                           incidencia durante la lectura
	 */
	public static Properties cargarConfiguraci√≥n(String archivoConfiguraci√≥n) throws AccesoBDException {
		Path rutaConfig;
		rutaConfig = Path.of(archivoConfiguraci√≥n);

		if (!existeArchivo(rutaConfig)) {
			String mensaje;
			mensaje = String.format("No existe el archivo ¬´%s¬ª", rutaConfig.getFileName());
			throw new AccesoBDException(mensaje);
		}

		Properties configuraci√≥n = new Properties();
		try (FileInputStream in = new FileInputStream(rutaConfig.toFile())) {
			configuraci√≥n.loadFromXML(in);
		} catch (IOException e) {
			throw new AccesoBDException("Error al cargar configuraci√≥n", e);
		}

		return configuraci√≥n;
	}

	/**
	 * Crea un archivo de configuraci√≥n con los datos de acceso a la base de datos
	 * en formato SQLite. El √∫nico aspecto relevante que contiene es el nombre del
	 * archivo.
	 * 
	 * @param archivoConfiguraci√≥n el nombre, ruta del archivo de configuraci√≥n
	 * @param archivoBD            el nombre, ruta del archivo de la base de datos
	 * @return la configuraci√≥n creada
	 */
	public static Properties crearConfiguraci√≥n(String archivoConfiguraci√≥n, String archivoBD) {
		Path rutaConfig;
		rutaConfig = Path.of(archivoConfiguraci√≥n);

		Properties configuraci√≥n = new Properties();
		configuraci√≥n.setProperty("jdbc.url", "jdbc:sqlite:" + archivoBD);
		configuraci√≥n.setProperty("jdbc.user", "");
		configuraci√≥n.setProperty("jdbc.password", "");
		configuraci√≥n.setProperty("jdbc.codificaci√≥n", "UTF-8");

		try (FileOutputStream out = new FileOutputStream(rutaConfig.toFile())) {
			configuraci√≥n.storeToXML(out, "Configuraci√≥n BD", "UTF-8");
			System.err.printf("Creado nuevo archivo de configuraci√≥n ¬´%s¬ª para ¬´%s¬ª%n", archivoConfiguraci√≥n,
					archivoBD);
		} catch (IOException e) {
			System.err.printf("Error al guardar configuraci√≥n en ¬´%s¬ª: %s%n", archivoConfiguraci√≥n,
					e.getLocalizedMessage());
		}
		return configuraci√≥n;
	}

	/**
	 * Comprueba la existencia de un archivo.
	 * 
	 * @param ruta el nombre, ruta del archivo a comprobar
	 * @return si existe o no
	 * @throws AccesoBDException si el archivo existe pero no se puede leer
	 */
	private static boolean existeArchivo(Path ruta) throws AccesoBDException {
		boolean existe;

		existe = Files.exists(ruta);

		if (existe && !Files.isReadable(ruta)) {
			String mensaje;
			mensaje = String.format("No se puede leer el archivo ¬´%s¬ª", ruta.getFileName());
			throw new AccesoBDException(mensaje);
		}
		return existe;
	}

	/**
	 * Abre la conexi√≥n a la base de datos si no ha sido abierta previamente. Crea
	 * tambi√©n una sentencia SQL gen√©rica ‚Äìdisponible para ejecutar consultas no
	 * preparadas‚Äì y la tabla principal en caso de no existir.
	 * 
	 * @return la conexi√≥n existente o creada
	 * @throws AccesoBDException si no se completa o se produce alguna incidencia
	 *                           durante la conexi√≥n
	 */
	public Connection abrirConexi√≥n() throws AccesoBDException {
		if (conexi√≥n == null) {
			String jdbcURL = configuraci√≥n.getProperty("jdbc.url");
			String jdbcUser = configuraci√≥n.getProperty("jdbc.user");
			String jdbcPassword = configuraci√≥n.getProperty("jdbc.password");

			try {
				conexi√≥n = DriverManager.getConnection(jdbcURL, jdbcUser, jdbcPassword);

				if (conexi√≥n == null) { // Conexi√≥n fallida
					String mensaje = String.format("%s ‚Äî Conexi√≥n fallida üòï%n", jdbcURL);
					throw new AccesoBDException(mensaje);
				}

				sentenciaGeneralSQL = conexi√≥n.createStatement();
				sentenciaGeneralSQL.setQueryTimeout(5);
				sentenciaGeneralSQL.execute(SQL_CREAR_TABLA);
			} catch (SQLException e) {
				String mensaje = String.format("%s ‚Äî Conexi√≥n fallida: %s", jdbcURL, e.getLocalizedMessage());
				throw new AccesoBDException(mensaje, e);
			}
		}
		return conexi√≥n;
	}

	/**
	 * Lee el contenido de la base de datos y crea un inventario con los puestos de
	 * un aula.
	 * 
	 * @param prefijo el prefijo del aula
	 * @return el aula reci√©n creada
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	public InventarioAula leer(String prefijo) throws AccesoBDException {
		ResultSet resultado;
		InventarioAula aula;

		String c√≥digoPuesto, ordenador, nombre, apellidos;

		try {
			if (preConsultaSQL == null) {
				preConsultaSQL = conexi√≥n.prepareStatement(SQL_LISTADO_AULA);
				preConsultaSQL.setQueryTimeout(5);
			}

			aula = InventarioAula.of(prefijo);
			preConsultaSQL.setString(1, prefijo + "%"); // Comod√≠n SQL en ¬´LIKE¬ª

			resultado = preConsultaSQL.executeQuery(SQL_LISTADO_AULA);
			while (resultado.next()) {
				c√≥digoPuesto = resultado.getString("c√≥digo_puesto");

				ordenador = resultado.getString("ordenador");
				nombre = resultado.getString("nombre");
				apellidos = resultado.getString("apellidos");
				aula.a√±adir(c√≥digoPuesto, new PuestoUsuario(ordenador, nombre, apellidos));
			}
		} catch (SQLException | InventarioException ex) {
			String mensaje = String.format("Error al cargar aula ¬´%s¬ª: %s", prefijo, ex.getLocalizedMessage());
			throw new AccesoBDException(mensaje, ex);
		}

		return aula;
	}

	/**
	 * Inserta un resultado en la base de datos. En caso de no existir la sentencia
	 * preparada se crea -permitiendo as√≠ que se pueda compartir en caso de realizar
	 * varias inserciones consecutivas.
	 * 
	 * @param c√≥digo el c√≥digo del puesto
	 * @param puesto los datos del puesto
	 * 
	 * @return el n√∫mero de filas afectadas ‚Äìcero o una‚Ä¶‚Äì
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	public int insertar(String c√≥digo, PuestoUsuario puesto) throws AccesoBDException {
		int n√∫mFilas = 0;
		try {
			if (preInserci√≥nSQL == null) {
				preInserci√≥nSQL = conexi√≥n.prepareStatement(SQL_INSERTAR_CONTACTO);
				preInserci√≥nSQL.setQueryTimeout(5);
			}

			preInserci√≥nSQL.setString(1, c√≥digo);
			preInserci√≥nSQL.setString(2, puesto.ordenador());
			preInserci√≥nSQL.setString(3, puesto.nombre());
			preInserci√≥nSQL.setString(4, puesto.apellidos());
			n√∫mFilas = preInserci√≥nSQL.executeUpdate();
		} catch (SQLException ex) {
			String mensaje = String.format("Error al insertar contacto: %s", ex.getLocalizedMessage());
			throw new AccesoBDException(mensaje, ex);
		}
		return n√∫mFilas;
	}

	/**
	 * Inserta los puestos de un aula en la base de datos.
	 * 
	 * @param aula el aula con los puestos a grabar
	 * @return el n√∫mero de filas afectadas, deber√≠a coincidir con el tama√±o de la
	 *         colecci√≥n original
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	public int escribir(InventarioAula aula) throws AccesoBDException {
		Set<String> lista;
		int n√∫mFilas = 0;

		if (aula == null) {
			throw new AccesoBDException("Lista nula");
		}

		lista = aula.generarListaC√≥digos();
		for (String c√≥digo : lista) {
			n√∫mFilas += insertar(c√≥digo, aula.get(c√≥digo));
		}

		return n√∫mFilas;
	}

	/**
	 * Descarta las sentencias SQL inicializadas y deja cerrada la conexi√≥n.
	 * 
	 * @throws AccesoBDException si se produce alguna incidencia
	 */
	@Override
	public void close() throws AccesoBDException {
		if (conexi√≥n != null) {
			try (Connection conexi√≥nCerrada = conexi√≥n) {
				conexi√≥n = null;
				sentenciaGeneralSQL = null;
				preInserci√≥nSQL = null;
				preConsultaSQL = null;
			} catch (SQLException e) {
				String mensaje = String.format("Error en cierre de conexi√≥n: %s", e.getLocalizedMessage());
				throw new AccesoBDException(mensaje, e);
			}
		}
	}

	/**
	 * Importa equipos almacenados en un archivo de texto reemplazando el contenido
	 * actual del programa. Emplea un formato propio ‚Äìde estilo CSV con separador
	 * ¬´#¬ª u otro‚Äì producido por una exportaci√≥n previa. El formato concreto de cada
	 * l√≠nea as√≠ como la l√≥gica de importaci√≥n/exportaci√≥n de los puestos depende
	 * del inventario. En caso de producirse alg√∫n error de acceso o por el propio
	 * formato del archivo, se env√≠a el mensaje a la salida de error est√°ndar y el
	 * programa contin√∫a sin perder el contenido anterior.
	 * 
	 * @param rutaArchivo la ubicaci√≥n del archivo de texto original
	 * 
	 * @throws AccesoBDException si se produce alguna incidencia al acceder a la
	 *                           base de datos
	 */
	private void generarBD(String rutaArchivo) throws AccesoBDException, IOException {
		AccesoArchivo archivo;
		InventarioAula nuevaLista;
		List<String> contenido;
		int n√∫mElementos;
		String mensaje;

		try {
			archivo = new AccesoArchivo(rutaArchivo);
			contenido = archivo.leer();
			n√∫mElementos = contenido.size() - 1; // 1 l√≠nea de cabecera, el prefijo

			if (n√∫mElementos < 1) {
				VistaGeneral.mostrarAviso("No hay ning√∫n elemento que importar");
			} else {
				nuevaLista = InventarioAula.of(contenido);
				n√∫mElementos = nuevaLista.getN√∫mElementos();

				if (n√∫mElementos > 0) {
					mensaje = String.format("%d equipos importados", n√∫mElementos);
					VistaGeneral.mostrarTexto(mensaje);

					abrirConexi√≥n();
					// vaciarBD();
					escribir(nuevaLista);
				} else {
					mensaje = String.format("%d equipos importados, transferencia fallida", n√∫mElementos);
					VistaGeneral.mostrarAviso(mensaje);
				}
			}
		} catch (InventarioException ex) {
			mensaje = String.format("Error de importaci√≥n: %s", ex.getLocalizedMessage());
			VistaGeneral.mostrarAviso(mensaje);
		}
	}
	/**
	 * Crea una conexi√≥n a la base de datos (alias para abrirConexi√≥n).
	 * 
	 * @throws SQLException si ocurre un error al conectar
	 */
	public void crearConexion() throws SQLException {
	    try {
	        abrirConexi√≥n();
	    } catch (AccesoBDException e) {
	        throw new SQLException("Error al crear conexi√≥n: " + e.getMessage(), e);
	    }
	}

	/**
	 * Crea la tabla de puestos si no existe (versi√≥n simplificada).
	 * 
	 * @throws SQLException si ocurre un error al crear la tabla
	 */
	public void crearTabla() throws SQLException {
	    try (Statement stmt = abrirConexi√≥n().createStatement()) {
	        stmt.execute(SQL_CREAR_TABLA);
	        System.out.println("Tabla 'Puestos' creada/verificada");
	    } catch (AccesoBDException e) {
	        throw new SQLException("Error al crear tabla: " + e.getMessage(), e);
	    }
	}

	/**
	 * Inserta un registro en la base de datos a partir de una l√≠nea de texto con formato CSV.
	 * 
	 * @param linea l√≠nea de texto con formato: CODIGO##EQUIPO##NOMBRE##APELLIDOS
	 * @throws SQLException si ocurre un error al insertar
	 * @throws IllegalArgumentException si la l√≠nea no tiene el formato correcto
	 */
	public void insertarRegistro(String linea) throws SQLException, IllegalArgumentException {
	    // Validar y dividir la l√≠nea
	    String[] partes = linea.split("##");
	    if (partes.length != 4) {
	        throw new IllegalArgumentException("Formato de l√≠nea inv√°lido. Se esperaba CODIGO##EQUIPO##NOMBRE##APELLIDOS");
	    }
	    
	    try {
	        // Usamos el m√©todo insertar existente que ya tiene PreparedStatement
	        insertar(partes[0].trim(), 
	                new PuestoUsuario(partes[1].trim(), partes[2].trim(), partes[3].trim()));
	    } catch (AccesoBDException e) {
	        throw new SQLException("Error al insertar registro: " + e.getMessage(), e);
	    }
	}

	/**
	 * Versi√≥n simplificada de generarBD para usar directamente desde MigrarInventarioBD.
	 * 
	 * @param nombreArchivo el nombre del archivo a importar
	 * @throws SQLException si ocurre un error durante la importaci√≥n
	 */
	public void importarDesdeArchivo(String nombreArchivo) throws SQLException {
	    try {
	        try {
				generarBD(nombreArchivo);
			} catch (IOException e) {
				// TODO Bloque catch generado autom√°ticamente
				e.printStackTrace();
			}
	    } catch (AccesoBDException e) {
	        throw new SQLException("Error al importar desde archivo: " + e.getMessage(), e);
	    }
	}

	/**
	 * Genera un archivo de base de datos de ejemplo y el archivo de configuraci√≥n
	 * correspondiente.
	 * 
	 * @param argumentos opciones de ejecuci√≥n ‚Äìno usado‚Äì
	 */
	public static void main(String[] argumentos) {
		try (AccesoBD acceso = new AccesoBD()) {
			// Cierre impl√≠cito con close() ‚Äìtry_with_resources‚Äì
			try {
				acceso.generarBD(NOMBRE_ARCHIVO);
			} catch (IOException e) {
				// TODO Bloque catch generado autom√°ticamente
				e.printStackTrace();
			}
		} catch (AccesoBDException e) {
			System.err.println(e.getLocalizedMessage());
		}
	}
}

